
#include <iostream>
using namespace std;

//declaring recursive functions
//loop_i is for the outer loop used in iterative solution
/*loop_j is for the inner/nested loop used inside the outer loop 
in iterative solution*/
int loop_i(int a[], int i, int n, int l[], int maxL);
int loop_j(int a[], int x, int j, int l[], int maxL);

//declaring a count variable
int c;

int main()
{
    //for taking inputs
    int n, i;
    cin>>n;
    int a[n], l[n]; //l[n] for keeping varying amounts of lengths
    for(i=0; i<n; i++)
    {
        cin>>a[i];
        l[i] = 0;
    }
    
    //solution using for loop (too much complexity)
    //int j;
    /*for(i=0; i<n; i++)
    {
        l[i] = 0;
        for(j=n-1; j>i; j--)
        {
            if(a[i] != a[j])
            {
                c++;
                l[c-1] = j-i;
                break;
            }
        }
    }
    */
    
    //recursive solution
    i=0;
    int maxL=0; //to choose the maximum length
    maxL =  loop_i(a, i, n, l, maxL);
    cout<<maxL;
    return 0;
}

int loop_i(int a[], int i, int n, int l[], int maxL)
{
    maxL = loop_j(a, i, n-1, l, maxL);
    
    if (i+1 != n-1)
    {
        loop_i(a, i+1, n, l, maxL);
    }
    else
    {
        return maxL;
    }
    
}

int loop_j(int a[], int x, int j, int l[], int maxL)
{
    int k;
    //if (j == x) return -1;
    /*else*/ if (a[x] != a[j])
    {
        c++;
        l[c-1] = j-x;
        for(k=0; k<c; k++)
        {
            maxL = max(maxL, l[k]);
        }
        return maxL;
    }
    else loop_j(a, x, j-1, l, maxL);
}



